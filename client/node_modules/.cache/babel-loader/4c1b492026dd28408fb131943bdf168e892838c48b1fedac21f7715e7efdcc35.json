{"ast":null,"code":"var _jsxFileName = \"C:\\\\Internship Project\\\\client\\\\src\\\\pages\\\\HomePage\\\\sidebar\\\\sideBar.js\";\n// Sidebar.js\n\nimport React, { useState, useEffect } from \"react\";\n//import axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Sidebar = () => {\n  //   // State to store the fetched data\n  //   const [data, setData] = useState([]);\n  //   // State to handle loading state\n  //   const [loading, setLoading] = useState(true);\n  //   // State to handle error state\n  //   const [error, setError] = useState(null);\n\n  //   useEffect(() => {\n  //     // Function to fetch data from the server\n  //     const fetchData = async () => {\n  //       try {\n  //         // Make HTTP request to fetch data\n  //         const response = await axios.get(\"/api/sidebar-data\");\n  //         // Set the fetched data to state\n  //         setData(response.data);\n  //         // Set loading state to false\n  //         setLoading(false);\n  //       } catch (error) {\n  //         // Set error state if request fails\n  //         setError(error.message);\n  //         // Set loading state to false\n  //         setLoading(false);\n  //       }\n  //     };\n\n  // Call the fetchData function when component mounts\n  // fetchData();\n\n  // Clean up function to cancel the request if component unmounts\n  //     return () => {\n  //       // cleanup\n  //     };\n  //   }, []); // Empty dependency array to run only once on component mount\n\n  //   // Render loading state if data is being fetched\n  //   if (loading) {\n  //     return <div>Loading...</div>;\n  //   }\n\n  //   // Render error state if request fails\n  //   if (error) {\n  //     return <div>Error: {error}</div>;\n  //   }\n\n  // Render sidebar with fetched data\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar bg-gray-200 border border-gray-300 p-4 rounded\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-semibold mb-4\",\n      children: \"Raporlar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"text-gray-700 mb-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \" asdafs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_c = Sidebar;\nexport default Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Sidebar","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Internship Project/client/src/pages/HomePage/sidebar/sideBar.js"],"sourcesContent":["// Sidebar.js\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\n//import axios from \"axios\";\r\n\r\nconst Sidebar = () => {\r\n  //   // State to store the fetched data\r\n  //   const [data, setData] = useState([]);\r\n  //   // State to handle loading state\r\n  //   const [loading, setLoading] = useState(true);\r\n  //   // State to handle error state\r\n  //   const [error, setError] = useState(null);\r\n\r\n  //   useEffect(() => {\r\n  //     // Function to fetch data from the server\r\n  //     const fetchData = async () => {\r\n  //       try {\r\n  //         // Make HTTP request to fetch data\r\n  //         const response = await axios.get(\"/api/sidebar-data\");\r\n  //         // Set the fetched data to state\r\n  //         setData(response.data);\r\n  //         // Set loading state to false\r\n  //         setLoading(false);\r\n  //       } catch (error) {\r\n  //         // Set error state if request fails\r\n  //         setError(error.message);\r\n  //         // Set loading state to false\r\n  //         setLoading(false);\r\n  //       }\r\n  //     };\r\n\r\n  // Call the fetchData function when component mounts\r\n  // fetchData();\r\n\r\n  // Clean up function to cancel the request if component unmounts\r\n  //     return () => {\r\n  //       // cleanup\r\n  //     };\r\n  //   }, []); // Empty dependency array to run only once on component mount\r\n\r\n  //   // Render loading state if data is being fetched\r\n  //   if (loading) {\r\n  //     return <div>Loading...</div>;\r\n  //   }\r\n\r\n  //   // Render error state if request fails\r\n  //   if (error) {\r\n  //     return <div>Error: {error}</div>;\r\n  //   }\r\n\r\n  // Render sidebar with fetched data\r\n  return (\r\n    <div className=\"sidebar bg-gray-200 border border-gray-300 p-4 rounded\">\r\n      <h2 className=\"text-xl font-semibold mb-4\">Raporlar</h2>\r\n      <ul>\r\n        <li className=\"text-gray-700 mb-2\"></li>\r\n        <li> asdafs</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,OAAO,GAAGA,CAAA,KAAM;EACpB;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA,oBACED,OAAA;IAAKE,SAAS,EAAC,wDAAwD;IAAAC,QAAA,gBACrEH,OAAA;MAAIE,SAAS,EAAC,4BAA4B;MAAAC,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxDP,OAAA;MAAAG,QAAA,gBACEH,OAAA;QAAIE,SAAS,EAAC;MAAoB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACxCP,OAAA;QAAAG,QAAA,EAAI;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACC,EAAA,GAvDIP,OAAO;AAyDb,eAAeA,OAAO;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}